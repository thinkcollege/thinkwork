/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

(function (wp) {
  var components = wp.components,
      data = wp.data,
      hooks = wp.hooks,
      i18n = wp.i18n;
  var __ = i18n.__;
  var useSelect = data.useSelect;
  var addFilter = hooks.addFilter;
  var Popover = components.Popover;

  function withReusableBlockWarning(Edit) {
    return function (props) {
      var clientId = props.clientId;

      var is_inner_block_selected = useSelect(function (select) {
        return select('core/block-editor').hasSelectedInnerBlock(clientId);
      });

      return React.createElement(
        "div",
        { className: "wp-block reusable-block__wrapper" },
        is_inner_block_selected && React.createElement(
          Popover,
          { className: "reusable-block__popover", noArrow: false, position: "bottom right" },
          React.createElement(
            "div",
            { "class": "reusable-block__message" },
            "\u26A0\uFE0F ",
            __('You are editing a reusable block. Any changes made here will apply wherever this block is used.')
          )
        ),
        React.createElement(Edit, props)
      );
    };
  }

  addFilter('blocks.registerBlockType', 'gutenberg/reusable-block-warning', function (settings, name) {
    if (name !== 'core/block') {
      return settings;
    }

    return _extends({}, settings, {
      styles: [],
      edit: withReusableBlockWarning(settings.edit)
    });
  });
})(wp);